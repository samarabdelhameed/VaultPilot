---
import Layout from "../layouts/Layout.astro";
import Navbar from "../components/Navbar.astro";
import Footer from "../components/Footer.astro";
import CardStat from "../components/CardStat";
import CTAButton from "../components/CTAButton";
---

<Layout title="TWAP + Limit Orders - VaultPilot">
  <Navbar />

  <main class="min-h-screen py-20 px-4 sm:px-6 lg:px-8">
    <div class="max-w-4xl mx-auto">
      <!-- Header -->
      <div
        class="flex flex-col lg:flex-row lg:items-center lg:justify-between mb-12 animate-fade-in"
      >
        <div>
          <h1 class="text-4xl font-bold text-white mb-4">
            <span
              class="bg-gradient-to-r from-primary-green to-primary-purple bg-clip-text text-transparent"
              >TWAP + Limit Orders</span
            >
          </h1>
          <p class="text-xl text-gray-300">
            Advanced Time-Weighted Average Price strategy with limit orders
          </p>
        </div>
        <div class="mt-6 lg:mt-0">
          <CTAButton variant="purple" href="/limit-orders" client:load>
            <span>My Orders</span>
            <svg
              class="w-4 h-4"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"
              ></path>
            </svg>
          </CTAButton>
        </div>
      </div>

      <!-- Main Trading Card -->
      <div
        class="p-8 bg-glass-gradient backdrop-blur-md border border-white/20 rounded-2xl shadow-glass animate-fade-in"
      >
        <!-- Top Bar -->
        <div class="flex items-center justify-between mb-8">
          <div class="flex items-center space-x-4">
            <h2 class="text-2xl font-bold text-primary-green">Limit + TWAP</h2>
            <div class="flex items-center space-x-2">
              <span class="text-sm text-gray-400">Vibe Check</span>
              <button
                id="vibe-check-toggle"
                class="relative inline-flex h-6 w-11 items-center rounded-full bg-gray-600 transition-colors"
              >
                <span
                  class="inline-block h-4 w-4 transform rounded-full bg-white transition-transform translate-x-1"
                ></span>
              </button>
            </div>
          </div>
          <button
            class="px-4 py-2 bg-white/10 border border-white/20 rounded-lg text-white hover:bg-white/20 transition-all"
          >
            My Orders
          </button>
        </div>

        <!-- Token Swap Section -->
        <div class="space-y-6">
          <!-- You Pay Section -->
          <div class="bg-white/10 border border-white/20 rounded-lg p-6">
            <div class="flex items-center justify-between">
              <div class="flex-1">
                <div class="flex items-center space-x-3 mb-2">
                  <div
                    class="w-8 h-8 bg-green-500 rounded-full flex items-center justify-center"
                  >
                    <span class="text-white font-bold text-sm">$</span>
                  </div>
                  <div>
                    <select
                      id="pay-token"
                      class="bg-transparent text-white font-semibold text-lg focus:outline-none"
                    >
                      <option value="USDC">USDC</option>
                      <option value="ETH">ETH</option>
                      <option value="WETH">WETH</option>
                    </select>
                  </div>
                </div>
                <p class="text-gray-400 text-sm">USD Coin</p>
              </div>
              <div class="text-right">
                <input
                  type="number"
                  id="pay-amount"
                  value="1"
                  class="bg-transparent text-white text-2xl font-bold text-right focus:outline-none w-24"
                />
                <p class="text-gray-400 text-sm">~$0.997543</p>
              </div>
            </div>
          </div>

          <!-- Swap Arrow -->
          <div class="flex justify-center">
            <button
              id="swap-tokens"
              class="w-12 h-12 bg-white/10 border border-white/20 rounded-full flex items-center justify-center hover:bg-white/20 transition-all"
            >
              <svg
                class="w-6 h-6 text-white"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M7 16V4m0 0L3 8m4-4l4 4m6 0v12m0 0l4-4m-4 4l-4-4"></path>
              </svg>
            </button>
          </div>

          <!-- You Receive Section -->
          <div class="bg-white/10 border border-white/20 rounded-lg p-6">
            <div class="flex items-center justify-between">
              <div class="flex-1">
                <div class="flex items-center space-x-3 mb-2">
                  <div
                    class="w-8 h-8 bg-purple-500 rounded-full flex items-center justify-center"
                  >
                    <span class="text-white font-bold text-sm">1</span>
                  </div>
                  <div>
                    <select
                      id="receive-token"
                      class="bg-transparent text-white font-semibold text-lg focus:outline-none"
                    >
                      <option value="1INCH">1INCH</option>
                      <option value="ETH">ETH</option>
                      <option value="WETH">WETH</option>
                    </select>
                  </div>
                </div>
                <p class="text-gray-400 text-sm">1INCH Token</p>
              </div>
              <div class="text-right">
                <input
                  type="number"
                  id="receive-amount"
                  value="5"
                  class="bg-transparent text-white text-2xl font-bold text-right focus:outline-none w-24"
                />
                <p class="text-gray-400 text-sm">~$1.165301</p>
                <p class="text-gray-400 text-xs">Balance: 0</p>
              </div>
            </div>
          </div>
        </div>

        <!-- Rate and Expiration Section -->
        <div class="mt-8 p-6 bg-white/10 border border-white/20 rounded-lg">
          <div class="flex items-center justify-between mb-4">
            <div>
              <p class="text-gray-400 text-sm">Pay USDC at rate</p>
              <p class="text-primary-green font-semibold">
                (+0.48%) 0.00029430087532 WETH
              </p>
            </div>
            <button
              class="px-4 py-2 bg-white/10 border border-white/20 rounded-lg text-white hover:bg-white/20 transition-all flex items-center space-x-2"
            >
              <svg
                class="w-4 h-4"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z"
                ></path>
              </svg>
              <span>Set to market</span>
            </button>
          </div>

          <div class="flex items-center justify-between">
            <span class="text-gray-400">Expires in</span>
            <select
              id="expiration"
              class="bg-transparent text-white border border-white/20 rounded px-3 py-1"
            >
              <option value="1">1 Day</option>
              <option value="7" selected>7 Days</option>
              <option value="30">30 Days</option>
            </select>
          </div>
        </div>

        <!-- TWAP Configuration -->
        <div class="mt-6 p-6 bg-white/10 border border-white/20 rounded-lg">
          <h3 class="text-lg font-bold text-primary-purple mb-4">
            TWAP Configuration
          </h3>

          <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
              <label class="block text-sm font-medium text-gray-400 mb-2"
                >Total Duration</label
              >
              <select
                id="total-duration"
                class="w-full px-4 py-3 bg-white/10 border border-white/20 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-primary-green"
              >
                <option value="15">15 Minutes</option>
                <option value="30">30 Minutes</option>
                <option value="60" selected>1 Hour</option>
                <option value="240">4 Hours</option>
                <option value="1440">1 Day</option>
              </select>
            </div>

            <div>
              <label class="block text-sm font-medium text-gray-400 mb-2"
                >Part Duration</label
              >
              <select
                id="part-duration"
                class="w-full px-4 py-3 bg-white/10 border border-white/20 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-primary-green"
              >
                <option value="5">5m</option>
                <option value="10">10m</option>
                <option value="15" selected>15m</option>
                <option value="30">30m</option>
              </select>
            </div>
          </div>

          <div class="mt-4 grid grid-cols-1 md:grid-cols-2 gap-6">
            <div class="bg-white/5 p-4 rounded-lg">
              <p class="text-gray-400 text-sm">Sell per part (1/4)</p>
              <p class="text-primary-green font-semibold">25 USDC</p>
              <p class="text-gray-400 text-xs">=$24.99</p>
            </div>

            <div class="bg-white/5 p-4 rounded-lg">
              <p class="text-gray-400 text-sm">Buy per part (1/4)</p>
              <p class="text-primary-purple font-semibold">74.0074 COW</p>
              <p class="text-gray-400 text-xs">=$24.88</p>
            </div>
          </div>
        </div>

        <!-- Action Button -->
        <div class="mt-8">
          <button
            id="connect-wallet-btn"
            class="w-full px-8 py-4 bg-gradient-to-r from-primary-green to-primary-purple text-black font-bold text-lg rounded-lg hover:shadow-glow transition-all duration-200"
          >
            Connect Wallet
          </button>
        </div>
      </div>

      <!-- Status Messages -->
      <div id="status-messages" class="mt-6 space-y-4">
        <!-- Status messages will be displayed here -->
      </div>
    </div>
  </main>

  <Footer />
</Layout>

<script>
  const API_BASE_URL = "http://localhost:3001";

  // Vibe Check Toggle
  document
    .getElementById("vibe-check-toggle")
    .addEventListener("click", function () {
      const toggle = this;
      const span = toggle.querySelector("span");

      if (toggle.classList.contains("bg-gray-600")) {
        toggle.classList.remove("bg-gray-600");
        toggle.classList.add("bg-primary-green");
        span.classList.remove("translate-x-1");
        span.classList.add("translate-x-6");
        showStatusMessage(
          "Vibe Check: ON - Sentiment analysis enabled",
          "success"
        );
      } else {
        toggle.classList.remove("bg-primary-green");
        toggle.classList.add("bg-gray-600");
        span.classList.remove("translate-x-6");
        span.classList.add("translate-x-1");
        showStatusMessage(
          "Vibe Check: OFF - Sentiment analysis disabled",
          "info"
        );
      }
    });

  // Swap Tokens
  document.getElementById("swap-tokens").addEventListener("click", function () {
    const payToken = document.getElementById("pay-token");
    const receiveToken = document.getElementById("receive-token");
    const payAmount = document.getElementById("pay-amount");
    const receiveAmount = document.getElementById("receive-amount");

    // Swap token selections
    const tempToken = payToken.value;
    payToken.value = receiveToken.value;
    receiveToken.value = tempToken;

    // Swap amounts (simple 1:1 for demo)
    const tempAmount = payAmount.value;
    payAmount.value = receiveAmount.value;
    receiveAmount.value = tempAmount;

    showStatusMessage("Tokens swapped successfully", "success");
  });

  // Update amounts based on rate
  function updateAmounts() {
    const payAmount =
      parseFloat(document.getElementById("pay-amount").value) || 0;
    const rate = 0.00029430087532; // Mock rate
    const receiveAmount = payAmount / rate;

    document.getElementById("receive-amount").value = receiveAmount.toFixed(6);

    // Update USD values
    const payUSD = payAmount * 0.997543;
    const receiveUSD = receiveAmount * 0.2330602;

    // Update display (you'd need to add elements for these)
    console.log(
      `Pay: $${payUSD.toFixed(6)}, Receive: $${receiveUSD.toFixed(6)}`
    );
  }

  // Listen for amount changes
  document
    .getElementById("pay-amount")
    .addEventListener("input", updateAmounts);
  document
    .getElementById("receive-amount")
    .addEventListener("input", function () {
      const receiveAmount = parseFloat(this.value) || 0;
      const rate = 0.00029430087532;
      const payAmount = receiveAmount * rate;

      document.getElementById("pay-amount").value = payAmount.toFixed(6);
    });

  // Connect Wallet Button
  document
    .getElementById("connect-wallet-btn")
    .addEventListener("click", function () {
      // Mock wallet connection
      this.textContent = "Creating TWAP Order...";
      this.disabled = true;

      setTimeout(() => {
        showStatusMessage(
          "TWAP + Limit Order created successfully!",
          "success"
        );
        this.textContent = "Order Created!";
        this.classList.remove("from-primary-green", "to-primary-purple");
        this.classList.add("bg-green-600");
      }, 2000);
    });

  // Helper function
  function showStatusMessage(message, type) {
    const statusDiv = document.getElementById("status-messages");
    const messageDiv = document.createElement("div");
    messageDiv.className = `p-4 rounded-lg ${
      type === "success"
        ? "bg-green-500/20 border border-green-500/30 text-green-400"
        : type === "info"
          ? "bg-blue-500/20 border border-blue-500/30 text-blue-400"
          : "bg-red-500/20 border border-red-500/30 text-red-400"
    }`;
    messageDiv.textContent = message;

    statusDiv.appendChild(messageDiv);

    // Remove message after 5 seconds
    setTimeout(() => {
      messageDiv.remove();
    }, 5000);
  }

  // Initialize
  document.addEventListener("DOMContentLoaded", function () {
    updateAmounts();
  });
</script>

