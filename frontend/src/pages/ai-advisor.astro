---
import Layout from "../layouts/Layout.astro";
import Navbar from "../components/Navbar.astro";
import Footer from "../components/Footer.astro";
import CTAButton from "../components/CTAButton";
import CardStat from "../components/CardStat";
---

<Layout title="AI Advisor - VaultPilot">
  <Navbar />

  <main class="min-h-screen py-20 px-4 sm:px-6 lg:px-8">
    <div class="max-w-7xl mx-auto">
      <!-- Header -->
      <div class="text-center mb-12 animate-fade-in">
        <h1 class="text-4xl font-bold text-white mb-4">
          AI <span
            class="bg-gradient-to-r from-primary-green to-primary-purple bg-clip-text text-transparent"
            >Investment Advisor</span
          >
        </h1>
        <p class="text-xl text-gray-300 max-w-2xl mx-auto">
          Get personalized investment recommendations powered by machine
          learning and real-time market analysis.
        </p>
      </div>

      <!-- Real-time Sentiment Analysis Section -->
      <div
        class="mb-12 p-6 bg-glass-gradient backdrop-blur-md border border-white/20 rounded-2xl shadow-glass animate-fade-in"
      >
        <h2 class="text-2xl font-bold text-white mb-4">
          Real-time Market Sentiment Analysis
        </h2>
        <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
          <div class="bg-white/10 p-4 rounded-lg">
            <h3 class="text-sm font-medium text-gray-400 mb-2">
              Current Sentiment
            </h3>
            <p class="text-2xl font-bold text-white" id="current-sentiment">
              Loading...
            </p>
            <p class="text-sm text-gray-400" id="sentiment-description">
              Analyzing market data...
            </p>
          </div>
          <div class="bg-white/10 p-4 rounded-lg">
            <h3 class="text-sm font-medium text-gray-400 mb-2">
              Market Recommendation
            </h3>
            <p
              class="text-lg font-semibold text-primary-green"
              id="market-recommendation"
            >
              Loading...
            </p>
            <p class="text-sm text-gray-400" id="recommendation-reason">
              Based on sentiment analysis
            </p>
          </div>
          <div class="bg-white/10 p-4 rounded-lg">
            <h3 class="text-sm font-medium text-gray-400 mb-2">
              Contract Status
            </h3>
            <p
              class="text-lg font-semibold text-primary-purple"
              id="contract-status"
            >
              Loading...
            </p>
            <p class="text-sm text-gray-400" id="execution-status">
              Checking conditions...
            </p>
          </div>
        </div>

        <!-- Sentiment Update Controls -->
        <div class="mt-6 p-4 bg-white/5 rounded-lg">
          <h3 class="text-lg font-semibold text-white mb-3">
            Update Market Sentiment
          </h3>
          <div class="flex items-center space-x-4">
            <input
              type="number"
              id="sentiment-input"
              min="0"
              max="100"
              value="70"
              class="flex-1 px-4 py-2 bg-white/10 border border-white/20 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-primary-green"
              placeholder="Enter sentiment score (0-100)"
            />
            <button
              id="update-sentiment-btn"
              class="px-6 py-2 bg-primary-green text-white font-medium rounded-lg hover:bg-primary-green/80 transition-colors"
            >
              Update Sentiment
            </button>
          </div>
          <p class="text-sm text-gray-400 mt-2">
            This will update the smart contract sentiment score and trigger AI
            analysis.
          </p>
        </div>
      </div>

      <!-- AI Chat Interface -->
      <div class="grid grid-cols-1 lg:grid-cols-3 gap-8 mb-12">
        <div class="lg:col-span-2">
          <div
            class="p-6 bg-gradient-to-br from-gray-900/50 to-gray-800/30 backdrop-blur-sm border border-gray-700/50 rounded-2xl animate-fade-in"
          >
            <div class="flex items-center space-x-3 mb-6">
              <div
                class="w-10 h-10 bg-gradient-to-br from-primary-green to-primary-purple rounded-full flex items-center justify-center"
              >
                <svg
                  class="w-5 h-5 text-black"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z"
                  ></path>
                </svg>
              </div>
              <div>
                <h3 class="text-lg font-semibold text-white">AI Advisor</h3>
                <p class="text-gray-400 text-sm">
                  Powered by GPT-4 & Real-time Data
                </p>
              </div>
              <div class="ml-auto">
                <div
                  class="w-3 h-3 bg-primary-green rounded-full animate-pulse"
                >
                </div>
              </div>
            </div>

            <div class="space-y-4 h-96 overflow-y-auto mb-4 pr-2">
              <!-- AI Message -->
              <div class="flex items-start space-x-3">
                <div
                  class="w-8 h-8 bg-gradient-to-br from-primary-green to-primary-purple rounded-full flex items-center justify-center"
                >
                  <span class="text-xs text-black font-bold">AI</span>
                </div>
                <div
                  class="bg-gray-800/50 rounded-2xl rounded-tl-none p-4 max-w-md"
                >
                  <p class="text-white text-sm">
                    Hello! I've analyzed your portfolio and market conditions.
                    Based on current DeFi trends and your risk profile, I have
                    some recommendations for you.
                  </p>
                </div>
              </div>

              <!-- User Message -->
              <div class="flex items-start space-x-3 justify-end">
                <div
                  class="bg-primary-green/20 rounded-2xl rounded-tr-none p-4 max-w-md"
                >
                  <p class="text-white text-sm">
                    What's the best strategy for maximizing yield in the current
                    market?
                  </p>
                </div>
                <div
                  class="w-8 h-8 bg-gray-700 rounded-full flex items-center justify-center"
                >
                  <span class="text-xs text-white">You</span>
                </div>
              </div>

              <!-- AI Response -->
              <div class="flex items-start space-x-3">
                <div
                  class="w-8 h-8 bg-gradient-to-br from-primary-green to-primary-purple rounded-full flex items-center justify-center"
                >
                  <span class="text-xs text-black font-bold">AI</span>
                </div>
                <div
                  class="bg-gray-800/50 rounded-2xl rounded-tl-none p-4 max-w-md"
                >
                  <p class="text-white text-sm mb-2">
                    Based on my analysis, here are the top 3 strategies for you:
                  </p>
                  <ol class="text-white text-sm space-y-1">
                    <li>
                      1. <span class="text-primary-green">Compound Finance</span
                      > - 12.4% APY, Low Risk
                    </li>
                    <li>
                      2. <span class="text-primary-purple">Curve 3Pool</span> - 18.7%
                      APY, Medium Risk
                    </li>
                    <li>
                      3. <span class="text-primary-green">Yearn USDC Vault</span
                      > - 24.3% APY, Higher Risk
                    </li>
                  </ol>
                  <div class="mt-3">
                    <CTAButton variant="green" size="sm" client:load>
                      Apply Recommendation
                    </CTAButton>
                  </div>
                </div>
              </div>
            </div>

            <!-- Message Input -->
            <div class="flex space-x-3">
              <input
                type="text"
                placeholder="Ask me anything about DeFi strategies..."
                class="flex-1 px-4 py-3 bg-gray-800/50 border border-gray-600 rounded-lg focus:ring-2 focus:ring-primary-green focus:border-transparent text-white placeholder-gray-400 transition-all duration-200"
              />
              <button
                class="px-6 py-3 bg-gradient-to-r from-primary-green to-primary-purple text-black font-medium rounded-lg hover:shadow-glow transition-all duration-200"
              >
                Send
              </button>
            </div>
          </div>
        </div>

        <!-- Sidebar -->
        <div class="space-y-6">
          <!-- Market Stats -->
          <div
            class="p-6 bg-gradient-to-br from-gray-900/50 to-gray-800/30 backdrop-blur-sm border border-gray-700/50 rounded-2xl animate-fade-in"
          >
            <h3 class="text-lg font-semibold text-white mb-4">
              Market Overview
            </h3>
            <div class="space-y-4">
              <CardStat
                client:load
                title="Total Market Cap"
                value="$2.4B"
                change="+12.5%"
                isPositive={true}
                gradient="green"
              />
              <CardStat
                client:load
                title="24h Volume"
                value="$847M"
                change="+8.3%"
                isPositive={true}
                gradient="purple"
              />
              <CardStat
                client:load
                title="Active Strategies"
                value="1,247"
                change="+156 today"
                isPositive={true}
                gradient="green"
              />
            </div>
          </div>

          <!-- Quick Actions -->
          <div
            class="p-6 bg-gradient-to-br from-gray-900/50 to-gray-800/30 backdrop-blur-sm border border-gray-700/50 rounded-2xl animate-fade-in"
          >
            <h3 class="text-lg font-semibold text-white mb-4">Quick Actions</h3>
            <div class="space-y-3">
              <CTAButton
                variant="green"
                size="sm"
                href="/create-vault"
                client:load
              >
                Create New Vault
              </CTAButton>
              <CTAButton
                variant="outline"
                size="sm"
                href="/my-vaults"
                client:load
              >
                View My Vaults
              </CTAButton>
              <CTAButton
                variant="outline"
                size="sm"
                href="/backtest"
                client:load
              >
                Run Backtest
              </CTAButton>
            </div>
          </div>
        </div>
      </div>
    </div>
  </main>

  <Footer />

  <script>
    // AI Advisor Integration
    const API_BASE_URL = "http://localhost:3001";

    async function loadContractStatus() {
      try {
        const response = await fetch(`${API_BASE_URL}/api/contract/status`);
        const data = await response.json();

        if (data.success) {
          const contractData = data.data;

          // Update current sentiment
          const currentSentiment = document.getElementById("current-sentiment");
          const sentimentDescription = document.getElementById(
            "sentiment-description"
          );
          if (currentSentiment && sentimentDescription) {
            currentSentiment.textContent = contractData.sentimentScore;

            if (contractData.sentimentScore >= 70) {
              sentimentDescription.textContent =
                "Bullish - Strong positive sentiment";
              currentSentiment.className =
                "text-2xl font-bold text-primary-green";
            } else if (contractData.sentimentScore >= 50) {
              sentimentDescription.textContent =
                "Neutral - Moderate market sentiment";
              currentSentiment.className = "text-2xl font-bold text-yellow-400";
            } else {
              sentimentDescription.textContent =
                "Bearish - Negative market sentiment";
              currentSentiment.className = "text-2xl font-bold text-red-400";
            }
          }

          // Update market recommendation
          const marketRecommendation = document.getElementById(
            "market-recommendation"
          );
          const recommendationReason = document.getElementById(
            "recommendation-reason"
          );
          if (marketRecommendation && recommendationReason) {
            if (contractData.sentimentScore >= 70) {
              marketRecommendation.textContent = "BUY";
              recommendationReason.textContent =
                "High sentiment suggests bullish market";
            } else if (contractData.sentimentScore >= 50) {
              marketRecommendation.textContent = "HOLD";
              recommendationReason.textContent =
                "Neutral sentiment, wait for signals";
            } else {
              marketRecommendation.textContent = "SELL";
              recommendationReason.textContent =
                "Low sentiment suggests bearish market";
            }
          }

          // Update contract status
          const contractStatus = document.getElementById("contract-status");
          const executionStatus = document.getElementById("execution-status");
          if (contractStatus && executionStatus) {
            contractStatus.textContent = contractData.canExecute
              ? "Ready"
              : "Not Ready";
            contractStatus.className = contractData.canExecute
              ? "text-lg font-semibold text-primary-green"
              : "text-lg font-semibold text-red-400";
            executionStatus.textContent = contractData.canExecute
              ? "Conditions met for execution"
              : "Waiting for conditions";
          }

          // Update sentiment input
          const sentimentInput = document.getElementById(
            "sentiment-input"
          ) as HTMLInputElement;
          if (sentimentInput) {
            sentimentInput.value = contractData.sentimentScore.toString();
          }
        }
      } catch (error) {
        console.error("Failed to load contract status:", error);
      }
    }

    async function updateSentiment() {
      const input = document.getElementById(
        "sentiment-input"
      ) as HTMLInputElement;
      const button = document.getElementById(
        "update-sentiment-btn"
      ) as HTMLButtonElement;

      if (!input || !button) return;

      const score = parseInt(input.value);
      if (isNaN(score) || score < 0 || score > 100) {
        alert("Please enter a valid score between 0 and 100");
        return;
      }

      button.textContent = "Updating...";
      button.disabled = true;

      try {
        const response = await fetch(`${API_BASE_URL}/api/contract/sentiment`, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({ score }),
        });

        const data = await response.json();

        if (data.success) {
          console.log("Sentiment updated successfully:", data.data);
          await loadContractStatus(); // Reload status
          alert(
            "Sentiment score updated successfully! AI analysis will be updated."
          );
        } else {
          alert("Failed to update sentiment score");
        }
      } catch (error) {
        console.error("Failed to update sentiment:", error);
        alert("Failed to update sentiment score");
      } finally {
        button.textContent = "Update Sentiment";
        button.disabled = false;
      }
    }

    // Initialize
    document.addEventListener("DOMContentLoaded", () => {
      loadContractStatus();

      // Set up event listeners
      const updateBtn = document.getElementById(
        "update-sentiment-btn"
      ) as HTMLButtonElement;
      if (updateBtn) {
        updateBtn.addEventListener("click", updateSentiment);
      }

      // Auto-refresh every 30 seconds
      setInterval(loadContractStatus, 30000);
    });
  </script>
</Layout>
