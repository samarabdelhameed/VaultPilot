---
export async function getStaticPaths() {
  // Generate static paths for demo vaults
  return [
    { params: { id: "eth-twap-vault" } },
    { params: { id: "btc-sentiment-vault" } },
    { params: { id: "hybrid-strategy-vault" } },
    { params: { id: "eth-usdc-twap-vault" } },
    { params: { id: "eth-usdc-sentiment-vault" } },
    { params: { id: "eth-usdc-hybrid-vault" } },
    { params: { id: "btc-usdt-twap-vault" } },
    { params: { id: "btc-usdt-sentiment-vault" } },
    { params: { id: "btc-usdt-hybrid-vault" } },
    { params: { id: "eth-btc-twap-vault" } },
    { params: { id: "eth-btc-sentiment-vault" } },
    { params: { id: "eth-btc-hybrid-vault" } },
    { params: { id: "matic-usdc-twap-vault" } },
    { params: { id: "matic-usdc-sentiment-vault" } },
    { params: { id: "matic-usdc-hybrid-vault" } },
    { params: { id: "demo-vault-1" } },
    { params: { id: "demo-vault-2" } },
    { params: { id: "demo-vault-3" } },
  ];
}

const { id } = Astro.params;

// Mock vault data based on ID
const getVaultData = (vaultId: string) => {
  const vaultConfigs = {
    "eth-twap-vault": {
      name: "ETH TWAP Smart Vault",
      strategy: "TWAP",
      tradingPair: "ETH/USDC",
      balance: "$45,230",
      roi: "28.4%",
      trades: 342,
      status: "Active",
    },
    "eth-usdc-twap-vault": {
      name: "ETH/USDC TWAP Smart Vault",
      strategy: "TWAP",
      tradingPair: "ETH/USDC",
      balance: "$32,150",
      roi: "22.1%",
      trades: 89,
      status: "Active",
    },
    "eth-usdc-sentiment-vault": {
      name: "ETH/USDC Sentiment Smart Vault",
      strategy: "Sentiment",
      tradingPair: "ETH/USDC",
      balance: "$28,750",
      roi: "19.8%",
      trades: 67,
      status: "Active",
    },
    "eth-usdc-hybrid-vault": {
      name: "ETH/USDC Hybrid Smart Vault",
      strategy: "Hybrid",
      tradingPair: "ETH/USDC",
      balance: "$41,200",
      roi: "31.5%",
      trades: 124,
      status: "Active",
    },
    "btc-sentiment-vault": {
      name: "BTC Sentiment Smart Vault",
      strategy: "Sentiment",
      tradingPair: "BTC/USDT",
      balance: "$67,890",
      roi: "19.2%",
      trades: 156,
      status: "Active",
    },
    "hybrid-strategy-vault": {
      name: "Hybrid Strategy Smart Vault",
      strategy: "Hybrid",
      tradingPair: "ETH/BTC",
      balance: "$14,330",
      roi: "31.7%",
      trades: 749,
      status: "Paused",
    },
  };

  return (
    vaultConfigs[vaultId as keyof typeof vaultConfigs] || {
      name: "New Smart Vault",
      strategy: vaultId.includes("sentiment")
        ? "Sentiment"
        : vaultId.includes("hybrid")
          ? "Hybrid"
          : "TWAP",
      tradingPair: "ETH/USDC",
      balance: "$25,000",
      roi: "15.5%",
      trades: 89,
      status: "Active",
    }
  );
};

const vaultInfo = getVaultData(id || "");

import Layout from "../../layouts/Layout.astro";
import Navbar from "../../components/Navbar.astro";
import Footer from "../../components/Footer.astro";
import CardStat from "../../components/CardStat";
import ChartCard from "../../components/ChartCard";
import CTAButton from "../../components/CTAButton";

// Mock data - in real app, this would come from the vault ID
const vaultData = [
  1000, 1200, 1100, 1400, 1600, 1800, 2100, 1900, 2200, 2500, 2700, 2900,
];
const labels = [
  "Week 1",
  "Week 2",
  "Week 3",
  "Week 4",
  "Week 5",
  "Week 6",
  "Week 7",
  "Week 8",
  "Week 9",
  "Week 10",
  "Week 11",
  "Week 12",
];
---

<Layout title="Vault Dashboard - VaultPilot">
  <Navbar />

  <main class="min-h-screen py-20 px-4 sm:px-6 lg:px-8">
    <div class="max-w-7xl mx-auto">
      <!-- Header -->
      <div class="mb-12 animate-fade-in">
        <div
          class="flex flex-col lg:flex-row lg:items-center lg:justify-between"
        >
          <div>
            <h1 class="text-4xl font-bold text-white mb-4">
              {vaultInfo.name.split(" ").slice(0, -2).join(" ")}
              <span
                class="bg-gradient-to-r from-primary-green to-primary-purple bg-clip-text text-transparent"
                >Smart Vault</span
              >
            </h1>
            <p class="text-gray-300 mb-4">
              Contract: 0x71C3f104aB544377712A8d1B393fB981F37226b6 • Strategy: {
                vaultInfo.strategy
              } • Created: Jan 15, 2025
            </p>
            <div class="flex items-center space-x-4">
              <span
                class={`px-3 py-1 text-sm font-medium rounded-full ${
                  vaultInfo.status === "Active"
                    ? "bg-primary-green/20 text-primary-green"
                    : "bg-yellow-500/20 text-yellow-400"
                }`}
              >
                {vaultInfo.status}
              </span>
              <span
                class="px-3 py-1 bg-blue-500/20 text-blue-400 text-sm font-medium rounded-full"
              >
                {vaultInfo.tradingPair}
              </span>
            </div>
          </div>
          <div class="mt-6 lg:mt-0 flex space-x-4">
            <button
              id="execute-trade-btn"
              class="px-8 py-4 bg-gradient-to-r from-primary-green to-emerald-400 text-black font-semibold rounded-full hover:shadow-glow transition-all duration-200 transform hover:scale-105 disabled:opacity-50 disabled:cursor-not-allowed flex items-center space-x-2"
            >
              <span id="execute-text">Execute Trade</span>
              <svg
                class="w-5 h-5"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M13 10V3L4 14h7v7l9-11h-7z"></path>
              </svg>
            </button>
            <button
              id="pause-strategy-btn"
              class="px-8 py-4 bg-transparent border-2 border-primary-green hover:bg-primary-green hover:text-black text-primary-green font-semibold rounded-full transition-all duration-200 transform hover:scale-105 flex items-center space-x-2"
            >
              <span id="pause-text">Pause Strategy</span>
              <svg
                class="w-5 h-5"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M10 9v6m4-6v6m7-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
              </svg>
            </button>
          </div>
        </div>
      </div>

      <!-- Smart Contract Status Section -->
      <div
        class="mb-12 p-6 bg-glass-gradient backdrop-blur-md border border-white/20 rounded-2xl shadow-glass animate-fade-in"
      >
        <h2 class="text-2xl font-bold text-white mb-4">
          Smart Contract Status
        </h2>
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-6">
          <div class="bg-white/10 p-4 rounded-lg">
            <h3 class="text-sm font-medium text-gray-400 mb-2">
              Execution Status
            </h3>
            <p
              class="text-lg font-semibold text-primary-green"
              id="execution-status"
            >
              Loading...
            </p>
          </div>
          <div class="bg-white/10 p-4 rounded-lg">
            <h3 class="text-sm font-medium text-gray-400 mb-2">
              Sentiment Score
            </h3>
            <p class="text-lg font-semibold text-white" id="sentiment-score">
              Loading...
            </p>
          </div>
          <div class="bg-white/10 p-4 rounded-lg">
            <h3 class="text-sm font-medium text-gray-400 mb-2">
              Next Execution
            </h3>
            <p
              class="text-sm font-semibold text-primary-purple"
              id="next-execution"
            >
              Loading...
            </p>
          </div>
          <div class="bg-white/10 p-4 rounded-lg">
            <h3 class="text-sm font-medium text-gray-400 mb-2">Network</h3>
            <p class="text-sm font-semibold text-primary-purple">
              Sepolia Testnet
            </p>
          </div>
        </div>

        <!-- Sentiment Update Controls -->
        <div class="p-4 bg-white/5 rounded-lg">
          <h3 class="text-lg font-semibold text-white mb-3">
            Update Sentiment Score
          </h3>
          <div class="flex items-center space-x-4">
            <input
              type="number"
              id="sentiment-input"
              min="0"
              max="100"
              value="70"
              class="flex-1 px-4 py-2 bg-white/10 border border-white/20 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-primary-green"
              placeholder="Enter sentiment score (0-100)"
            />
            <button
              id="update-sentiment-btn"
              class="px-6 py-2 bg-primary-green text-white font-medium rounded-lg hover:bg-primary-green/80 transition-colors"
            >
              Update
            </button>
          </div>
        </div>
      </div>

      <!-- Stats Grid -->
      <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6 mb-12">
        <CardStat
          client:load
          title="Vault Balance"
          value={vaultInfo.balance}
          change="+18.5%"
          isPositive={true}
          gradient="green"
        />
        <CardStat
          client:load
          title="Total Trades"
          value={vaultInfo.trades.toString()}
          change="+24.7%"
          isPositive={true}
          gradient="purple"
        />
        <CardStat
          client:load
          title="ROI"
          value={vaultInfo.roi}
          change="+2.1%"
          isPositive={true}
          gradient="green"
        />
        <CardStat
          client:load
          title="Sentiment Score"
          value="0.73"
          change="+5.3%"
          isPositive={true}
          gradient="purple"
        />
      </div>

      <!-- Charts Grid -->
      <div class="grid grid-cols-1 xl:grid-cols-2 gap-8 mb-12">
        <ChartCard
          client:load
          title="Vault Performance"
          data={vaultData}
          labels={labels}
          gradient="green"
        />
        <ChartCard
          client:load
          title="Trading Volume"
          data={[
            500, 600, 550, 700, 800, 900, 1050, 950, 1100, 1250, 1350, 1450,
          ]}
          labels={labels}
          gradient="purple"
        />
      </div>

      <!-- Recent Trades -->
      <div
        class="p-6 bg-gradient-to-br from-gray-900/50 to-gray-800/30 backdrop-blur-sm border border-gray-700/50 rounded-2xl animate-fade-in"
      >
        <h3 class="text-xl font-semibold text-white mb-6">Recent Trades</h3>
        <div class="space-y-4">
          <div
            class="flex items-center justify-between p-4 bg-white/5 rounded-lg"
          >
            <div class="flex items-center space-x-4">
              <div class="w-3 h-3 bg-primary-green rounded-full"></div>
              <div>
                <p class="text-white font-medium">Buy ETH</p>
                <p class="text-gray-400 text-sm">2 hours ago</p>
              </div>
            </div>
            <div class="text-right">
              <p class="text-primary-green font-semibold">+$1,250</p>
              <p class="text-gray-400 text-sm">2.5 ETH @ $2,100</p>
            </div>
          </div>

          <div
            class="flex items-center justify-between p-4 bg-white/5 rounded-lg"
          >
            <div class="flex items-center space-x-4">
              <div class="w-3 h-3 bg-red-500 rounded-full"></div>
              <div>
                <p class="text-white font-medium">Sell USDC</p>
                <p class="text-gray-400 text-sm">4 hours ago</p>
              </div>
            </div>
            <div class="text-right">
              <p class="text-red-400 font-semibold">-$850</p>
              <p class="text-gray-400 text-sm">1,000 USDC @ $1.00</p>
            </div>
          </div>

          <div
            class="flex items-center justify-between p-4 bg-white/5 rounded-lg"
          >
            <div class="flex items-center space-x-4">
              <div class="w-3 h-3 bg-primary-green rounded-full"></div>
              <div>
                <p class="text-white font-medium">Buy ETH</p>
                <p class="text-gray-400 text-sm">6 hours ago</p>
              </div>
            </div>
            <div class="text-right">
              <p class="text-primary-green font-semibold">+$2,100</p>
              <p class="text-gray-400 text-sm">1.0 ETH @ $2,100</p>
            </div>
          </div>
        </div>
      </div>
    </div>
  </main>

  <Footer />

  <script>
    // Vault Details Integration
    const API_BASE_URL = "http://localhost:3001";

    async function loadContractStatus() {
      try {
        const response = await fetch(`${API_BASE_URL}/api/contract/status`);
        const data = await response.json();

        if (data.success) {
          const contractData = data.data;

          // Update execution status
          const executionStatus = document.getElementById("execution-status");
          if (executionStatus) {
            executionStatus.textContent = contractData.canExecute
              ? "Ready"
              : "Not Ready";
            executionStatus.className = contractData.canExecute
              ? "text-lg font-semibold text-primary-green"
              : "text-lg font-semibold text-red-400";
          }

          // Update sentiment score
          const sentimentScore = document.getElementById("sentiment-score");
          if (sentimentScore) {
            sentimentScore.textContent = contractData.sentimentScore;
          }

          // Update next execution time
          const nextExecution = document.getElementById("next-execution");
          if (nextExecution) {
            const nextTime = new Date(contractData.nextExecutionTime * 1000);
            nextExecution.textContent = nextTime.toLocaleString();
          }

          // Update sentiment input
          const sentimentInput = document.getElementById(
            "sentiment-input"
          ) as HTMLInputElement;
          if (sentimentInput) {
            sentimentInput.value = contractData.sentimentScore.toString();
          }

          // Update execute trade button
          const executeBtn = document.getElementById(
            "execute-trade-btn"
          ) as HTMLButtonElement;
          const executeText = document.getElementById("execute-text");
          if (executeBtn && executeText) {
            if (contractData.canExecute) {
              executeBtn.disabled = false;
              executeText.textContent = "Execute Trade";
            } else {
              executeBtn.disabled = true;
              executeText.textContent = "Waiting for Conditions";
            }
          }
        }
      } catch (error) {
        console.error("Failed to load contract status:", error);
      }
    }

    async function updateSentiment() {
      const input = document.getElementById(
        "sentiment-input"
      ) as HTMLInputElement;
      const button = document.getElementById(
        "update-sentiment-btn"
      ) as HTMLButtonElement;

      if (!input || !button) return;

      const score = parseInt(input.value);
      if (isNaN(score) || score < 0 || score > 100) {
        alert("Please enter a valid score between 0 and 100");
        return;
      }

      button.textContent = "Updating...";
      button.disabled = true;

      try {
        const response = await fetch(`${API_BASE_URL}/api/contract/sentiment`, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({ score }),
        });

        const data = await response.json();

        if (data.success) {
          console.log("Sentiment updated successfully:", data.data);
          await loadContractStatus(); // Reload status
          alert("Sentiment score updated successfully!");
        } else {
          alert("Failed to update sentiment score");
        }
      } catch (error) {
        console.error("Failed to update sentiment:", error);
        alert("Failed to update sentiment score");
      } finally {
        button.textContent = "Update";
        button.disabled = false;
      }
    }

    async function executeTrade() {
      const button = document.getElementById(
        "execute-trade-btn"
      ) as HTMLButtonElement;
      const text = document.getElementById("execute-text");

      if (!button || !text) return;

      button.disabled = true;
      text.textContent = "Executing...";

      try {
        // Note: This would require actual order data from 1inch
        // For now, we'll just show a message
        alert(
          "Trade execution requires valid 1inch order data. This feature is limited on Sepolia testnet."
        );
      } catch (error) {
        console.error("Failed to execute trade:", error);
        alert("Failed to execute trade");
      } finally {
        button.disabled = false;
        text.textContent = "Execute Trade";
      }
    }

    // Initialize
    document.addEventListener("DOMContentLoaded", () => {
      loadContractStatus();

      // Set up event listeners
      const updateBtn = document.getElementById(
        "update-sentiment-btn"
      ) as HTMLButtonElement;
      if (updateBtn) {
        updateBtn.addEventListener("click", updateSentiment);
      }

      const executeBtn = document.getElementById(
        "execute-trade-btn"
      ) as HTMLButtonElement;
      if (executeBtn) {
        executeBtn.addEventListener("click", executeTrade);
      }

      // Auto-refresh every 30 seconds
      setInterval(loadContractStatus, 30000);
    });
  </script>
</Layout>
