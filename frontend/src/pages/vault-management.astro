---
import Layout from "../layouts/Layout.astro";
import Navbar from "../components/Navbar.astro";
import Footer from "../components/Footer.astro";
import CardStat from "../components/CardStat";
import CTAButton from "../components/CTAButton";
---

<Layout title="Vault Management - VaultPilot">
  <Navbar />

  <main class="min-h-screen py-20 px-4 sm:px-6 lg:px-8">
    <div class="max-w-7xl mx-auto">
      <!-- Header -->
      <div
        class="flex flex-col lg:flex-row lg:items-center lg:justify-between mb-12 animate-fade-in"
      >
        <div>
          <h1 class="text-4xl font-bold text-white mb-4">
            <span
              class="bg-gradient-to-r from-primary-green to-primary-purple bg-clip-text text-transparent"
              >Vault Management</span
            >
          </h1>
          <p class="text-xl text-gray-300">
            Advanced vault control and monitoring with real-time statistics.
          </p>
        </div>
        <div class="mt-6 lg:mt-0">
          <CTAButton variant="purple" href="/1inch-orders" client:load>
            <span>1inch Orders</span>
            <svg
              class="w-4 h-4"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M13 7l5 5m0 0l-5 5m5-5H6"></path>
            </svg>
          </CTAButton>
        </div>
      </div>

      <!-- Vault Statistics Section -->
      <div
        class="mb-12 p-6 bg-glass-gradient backdrop-blur-md border border-white/20 rounded-2xl shadow-glass animate-fade-in"
      >
        <h2 class="text-2xl font-bold text-white mb-6">Vault Statistics</h2>
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          <div class="bg-white/10 p-4 rounded-lg">
            <h3 class="text-sm font-medium text-gray-400 mb-2">Total Trades</h3>
            <p
              class="text-primary-green font-semibold text-xl"
              id="total-trades"
            >
              Loading...
            </p>
          </div>
          <div class="bg-white/10 p-4 rounded-lg">
            <h3 class="text-sm font-medium text-gray-400 mb-2">Total Volume</h3>
            <p
              class="text-primary-green font-semibold text-xl"
              id="total-volume"
            >
              Loading...
            </p>
          </div>
          <div class="bg-white/10 p-4 rounded-lg">
            <h3 class="text-sm font-medium text-gray-400 mb-2">
              Current Sentiment
            </h3>
            <p
              class="text-primary-purple font-semibold text-xl"
              id="current-sentiment"
            >
              Loading...
            </p>
          </div>
          <div class="bg-white/10 p-4 rounded-lg">
            <h3 class="text-sm font-medium text-gray-400 mb-2">Current Risk</h3>
            <p
              class="text-primary-purple font-semibold text-xl"
              id="current-risk"
            >
              Loading...
            </p>
          </div>
          <div class="bg-white/10 p-4 rounded-lg">
            <h3 class="text-sm font-medium text-gray-400 mb-2">
              Last Execution
            </h3>
            <p class="text-white font-semibold text-sm" id="last-execution">
              Loading...
            </p>
          </div>
          <div class="bg-white/10 p-4 rounded-lg">
            <h3 class="text-sm font-medium text-gray-400 mb-2">
              Next Execution
            </h3>
            <p class="text-white font-semibold text-sm" id="next-execution">
              Loading...
            </p>
          </div>
        </div>

        <button
          id="refresh-stats-btn"
          class="mt-6 px-6 py-3 bg-gradient-to-r from-primary-green to-primary-purple text-black font-medium rounded-lg hover:shadow-glow transition-all duration-200"
        >
          Refresh Statistics
        </button>
      </div>

      <!-- Execution Status Section -->
      <div
        class="mb-12 p-6 bg-glass-gradient backdrop-blur-md border border-white/20 rounded-2xl shadow-glass animate-fade-in"
      >
        <h2 class="text-2xl font-bold text-white mb-6">Execution Status</h2>
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          <div class="bg-white/10 p-4 rounded-lg">
            <h3 class="text-sm font-medium text-gray-400 mb-2">Can Execute</h3>
            <p class="text-primary-green font-semibold" id="can-execute">
              Loading...
            </p>
          </div>
          <div class="bg-white/10 p-4 rounded-lg">
            <h3 class="text-sm font-medium text-gray-400 mb-2">Is Active</h3>
            <p class="text-primary-purple font-semibold" id="is-active">
              Loading...
            </p>
          </div>
          <div class="bg-white/10 p-4 rounded-lg">
            <h3 class="text-sm font-medium text-gray-400 mb-2">
              Time Until Next
            </h3>
            <p class="text-white font-semibold" id="time-until-next">
              Loading...
            </p>
          </div>
          <div class="bg-white/10 p-4 rounded-lg">
            <h3 class="text-sm font-medium text-gray-400 mb-2">
              Sentiment Met
            </h3>
            <p class="text-primary-green font-semibold" id="sentiment-met">
              Loading...
            </p>
          </div>
          <div class="bg-white/10 p-4 rounded-lg">
            <h3 class="text-sm font-medium text-gray-400 mb-2">
              Risk Acceptable
            </h3>
            <p class="text-primary-purple font-semibold" id="risk-acceptable">
              Loading...
            </p>
          </div>
        </div>

        <button
          id="refresh-status-btn"
          class="mt-6 px-6 py-3 bg-gradient-to-r from-primary-purple to-primary-green text-black font-medium rounded-lg hover:shadow-glow transition-all duration-200"
        >
          Refresh Status
        </button>
      </div>

      <!-- Control Panel Section -->
      <div
        class="mb-12 p-6 bg-glass-gradient backdrop-blur-md border border-white/20 rounded-2xl shadow-glass animate-fade-in"
      >
        <h2 class="text-2xl font-bold text-white mb-6">Control Panel</h2>

        <div class="grid grid-cols-1 md:grid-cols-3 gap-8">
          <!-- Risk Management -->
          <div class="bg-white/10 p-6 rounded-lg">
            <h3 class="text-lg font-bold text-primary-green mb-4">
              Risk Management
            </h3>

            <div class="space-y-4">
              <div>
                <label class="block text-sm font-medium text-gray-400 mb-2"
                  >Risk Level (0-100)</label
                >
                <input
                  type="number"
                  id="risk-level-input"
                  min="0"
                  max="100"
                  value="50"
                  class="w-full px-4 py-3 bg-white/10 border border-white/20 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-primary-green"
                />
              </div>

              <button
                id="update-risk-btn"
                class="w-full px-6 py-3 bg-gradient-to-r from-primary-green to-primary-purple text-black font-medium rounded-lg hover:shadow-glow transition-all duration-200"
              >
                Update Risk Level
              </button>
            </div>
          </div>

          <!-- Vault Control -->
          <div class="bg-white/10 p-6 rounded-lg">
            <h3 class="text-lg font-bold text-primary-purple mb-4">
              Vault Control
            </h3>

            <div class="space-y-4">
              <button
                id="pause-vault-btn"
                class="w-full px-6 py-3 bg-red-600 hover:bg-red-700 text-white font-medium rounded-lg transition-all duration-200"
              >
                Pause Vault
              </button>

              <button
                id="resume-vault-btn"
                class="w-full px-6 py-3 bg-green-600 hover:bg-green-700 text-white font-medium rounded-lg transition-all duration-200"
              >
                Resume Vault
              </button>
            </div>
          </div>

          <!-- Sentiment Control -->
          <div class="bg-white/10 p-6 rounded-lg">
            <h3 class="text-lg font-bold text-primary-green mb-4">
              Sentiment Control
            </h3>

            <div class="space-y-4">
              <div>
                <label class="block text-sm font-medium text-gray-400 mb-2"
                  >Sentiment Score (0-100)</label
                >
                <input
                  type="number"
                  id="sentiment-input"
                  min="0"
                  max="100"
                  value="70"
                  class="w-full px-4 py-3 bg-white/10 border border-white/20 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-primary-green"
                />
              </div>

              <button
                id="update-sentiment-btn"
                class="w-full px-6 py-3 bg-gradient-to-r from-primary-green to-primary-purple text-black font-medium rounded-lg hover:shadow-glow transition-all duration-200"
              >
                Update Sentiment
              </button>
            </div>
          </div>
        </div>
      </div>

      <!-- Status Messages -->
      <div id="status-messages" class="space-y-4">
        <!-- Status messages will be displayed here -->
      </div>
    </div>
  </main>

  <Footer />
</Layout>

<script>
  const API_BASE_URL = "http://localhost:3001";

  // Load initial data
  document.addEventListener("DOMContentLoaded", function () {
    loadVaultStats();
    loadExecutionStatus();
  });

  // Load vault statistics
  async function loadVaultStats() {
    try {
      const response = await fetch(`${API_BASE_URL}/api/contract/stats`);
      const data = await response.json();

      if (data.success) {
        document.getElementById("total-trades").textContent =
          data.data.totalTrades;
        document.getElementById("total-volume").textContent =
          data.data.totalVolume;
        document.getElementById("last-execution").textContent = formatTimestamp(
          data.data.lastExecution
        );
        document.getElementById("next-execution").textContent = formatTimestamp(
          data.data.nextExecution
        );
        document.getElementById("current-sentiment").textContent =
          data.data.currentSentiment;
        document.getElementById("current-risk").textContent =
          data.data.currentRisk;
      } else {
        showStatusMessage("Error loading vault statistics", "error");
      }
    } catch (error) {
      console.error("Error loading vault stats:", error);
      showStatusMessage("Failed to load vault statistics", "error");
    }
  }

  // Load execution status
  async function loadExecutionStatus() {
    try {
      const response = await fetch(
        `${API_BASE_URL}/api/contract/execution-status`
      );
      const data = await response.json();

      if (data.success) {
        document.getElementById("can-execute").textContent = data.data
          .canExecute
          ? "Yes"
          : "No";
        document.getElementById("is-active").textContent = data.data.isActive
          ? "Yes"
          : "No";
        document.getElementById("time-until-next").textContent = formatTime(
          data.data.timeUntilNext
        );
        document.getElementById("sentiment-met").textContent = data.data
          .sentimentMet
          ? "Yes"
          : "No";
        document.getElementById("risk-acceptable").textContent = data.data
          .riskAcceptable
          ? "Yes"
          : "No";
      } else {
        showStatusMessage("Error loading execution status", "error");
      }
    } catch (error) {
      console.error("Error loading execution status:", error);
      showStatusMessage("Failed to load execution status", "error");
    }
  }

  // Update risk level
  document
    .getElementById("update-risk-btn")
    .addEventListener("click", async () => {
      const riskLevel = parseInt(
        document.getElementById("risk-level-input").value
      );

      if (riskLevel < 0 || riskLevel > 100) {
        showStatusMessage("Risk level must be between 0 and 100", "error");
        return;
      }

      try {
        const response = await fetch(`${API_BASE_URL}/api/contract/risk`, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({ riskLevel }),
        });

        const data = await response.json();

        if (data.success) {
          showStatusMessage(
            `Risk level updated successfully! TX: ${data.data.transactionHash}`,
            "success"
          );
          loadVaultStats();
        } else {
          showStatusMessage(`Error: ${data.error}`, "error");
        }
      } catch (error) {
        console.error("Error updating risk level:", error);
        showStatusMessage("Failed to update risk level", "error");
      }
    });

  // Update sentiment
  document
    .getElementById("update-sentiment-btn")
    .addEventListener("click", async () => {
      const score = parseInt(document.getElementById("sentiment-input").value);

      if (score < 0 || score > 100) {
        showStatusMessage("Sentiment score must be between 0 and 100", "error");
        return;
      }

      try {
        const response = await fetch(`${API_BASE_URL}/api/contract/sentiment`, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({ score }),
        });

        const data = await response.json();

        if (data.success) {
          showStatusMessage(
            `Sentiment updated successfully! TX: ${data.data.transactionHash}`,
            "success"
          );
          loadVaultStats();
          loadExecutionStatus();
        } else {
          showStatusMessage(`Error: ${data.error}`, "error");
        }
      } catch (error) {
        console.error("Error updating sentiment:", error);
        showStatusMessage("Failed to update sentiment", "error");
      }
    });

  // Pause vault
  document
    .getElementById("pause-vault-btn")
    .addEventListener("click", async () => {
      try {
        const response = await fetch(`${API_BASE_URL}/api/contract/pause`, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
        });

        const data = await response.json();

        if (data.success) {
          showStatusMessage(
            `Vault paused successfully! TX: ${data.data.transactionHash}`,
            "success"
          );
          loadExecutionStatus();
        } else {
          showStatusMessage(`Error: ${data.error}`, "error");
        }
      } catch (error) {
        console.error("Error pausing vault:", error);
        showStatusMessage("Failed to pause vault", "error");
      }
    });

  // Resume vault
  document
    .getElementById("resume-vault-btn")
    .addEventListener("click", async () => {
      try {
        const response = await fetch(`${API_BASE_URL}/api/contract/resume`, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
        });

        const data = await response.json();

        if (data.success) {
          showStatusMessage(
            `Vault resumed successfully! TX: ${data.data.transactionHash}`,
            "success"
          );
          loadExecutionStatus();
        } else {
          showStatusMessage(`Error: ${data.error}`, "error");
        }
      } catch (error) {
        console.error("Error resuming vault:", error);
        showStatusMessage("Failed to resume vault", "error");
      }
    });

  // Refresh buttons
  document
    .getElementById("refresh-stats-btn")
    .addEventListener("click", loadVaultStats);
  document
    .getElementById("refresh-status-btn")
    .addEventListener("click", loadExecutionStatus);

  // Helper functions
  function formatTimestamp(timestamp) {
    if (timestamp === 0) return "Never";
    return new Date(timestamp * 1000).toLocaleString();
  }

  function formatTime(seconds) {
    if (seconds === 0) return "Ready";
    const hours = Math.floor(seconds / 3600);
    const minutes = Math.floor((seconds % 3600) / 60);
    const secs = seconds % 60;
    return `${hours}h ${minutes}m ${secs}s`;
  }

  function showStatusMessage(message, type) {
    const statusDiv = document.getElementById("status-messages");
    const messageDiv = document.createElement("div");
    messageDiv.className = `p-4 rounded-lg ${
      type === "success"
        ? "bg-green-500/20 border border-green-500/30 text-green-400"
        : "bg-red-500/20 border border-red-500/30 text-red-400"
    }`;
    messageDiv.textContent = message;

    statusDiv.appendChild(messageDiv);

    // Remove message after 5 seconds
    setTimeout(() => {
      messageDiv.remove();
    }, 5000);
  }
</script>
